{"ast":null,"code":"var _jsxFileName = \"/Users/darina/Documents/GitHub/goit-react-hw-04-images/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport Searchbar from \"./Searchbar\";\nimport ImageGallery from \"./ImageGallery\";\nimport fetchImages from '../services/image-api';\nimport Loader from \"./Loader\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const [query, setQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [images, setImages] = useState([]); // const [largeImages, setLargeImages] = useState('');\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    if (!query) return;\n\n    const getImages = async () => {\n      try {\n        const images = await fetchImages(query, page);\n\n        if (images.lenght === 0) {\n          return setError(Notify.warning('Sorry, there are no images matching your search query'));\n        }\n\n        setImages(prevImages => [...prevImages, ...images]);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getImages();\n  }, [page, query]);\n\n  const searchImages = newSearch => {\n    setQuery(newSearch);\n    setImages([]);\n    setPage(1);\n    setError(false);\n    setIsLoading(true);\n  };\n\n  const loadMoreButton = () => {\n    setIsLoading(true);\n    setPage(prev => prev + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n      onSubmit: searchImages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 10\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(ImageGallery, {\n      images: images\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 10\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(Button, {\n      LoadMoreButton: loadMoreButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n} // export class App extends Component {\n//   onHandleSubmit = query => {\n//     if (this.state.query === query) {\n//       return;\n//     }\n//     this.setState({\n//       query,\n//       page: 1,\n//       images: [],\n//       isLoading: true,\n//       isLoadMore: false,\n//     });\n//   };\n//   LoadMoreButton = () => {\n//     this.setState(prevState => ({ page: prevState.page + 1 }));\n//   };\n//   async componentDidUpdate(prevProps, prevState) {\n//     const perPage = 12;\n//     try {\n//       if (\n//         prevState.query !== this.state.query ||\n//         prevState.page !== this.state.page\n//       ) {\n//         const data = await fetchImages(this.state.query, this.state.page);\n//         if (data.hits.length === 0) {\n//           Notify.warning(\n//             'Sorry, there are no images matching your search query'\n//           );\n//           this.setState({ isLoading: false });\n//           return;\n//         }\n//         this.setState(prevState => ({\n//           images: [...prevState.images, ...data.hits],\n//           isLoading: false,\n//         }));\n//         let totalPage = data.totalHits / perPage;\n//         if (totalPage > 1) {\n//           this.setState({ isLoadMore: true });\n//         }\n//         if (this.state.page > totalPage) {\n//           this.setState({ isLoadMore: false });\n//         }\n//       }\n//     } catch (error) {\n//       this.setState({ isError: true, isLoading: false });\n//     }\n//   }\n//   render() {\n//     const { images, isLoading, isLoadMore } = this.state;\n//     return (\n//     );\n//   }\n// }\n\n_s(App, \"5M2X8HUnAle+e65OaHZC/xtB+0U=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/darina/Documents/GitHub/goit-react-hw-04-images/src/components/App.jsx"],"names":["useState","useEffect","Notify","Searchbar","ImageGallery","fetchImages","Loader","Button","App","query","setQuery","page","setPage","images","setImages","isLoading","setIsLoading","error","setError","getImages","lenght","warning","prevImages","err","searchImages","newSearch","loadMoreButton","prev"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport Searchbar from \"./Searchbar\";\nimport ImageGallery from \"./ImageGallery\";\nimport fetchImages from '../services/image-api';\nimport Loader from \"./Loader\";\nimport Button from \"./Button\";\n\nexport function App(){\n  const [query, setQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [images, setImages] = useState([]);\n  // const [largeImages, setLargeImages] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => { \n    if (!query) return;\n    const getImages = async () => {\n      try {\n        const images = await fetchImages(query, page);\n        if (images.lenght === 0) {\n          return setError(Notify.warning(\n            'Sorry, there are no images matching your search query'))\n        }\n        setImages(prevImages => [...prevImages, ...images]);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setIsLoading(false)\n      }\n    };\n\n    getImages();\n  }, [page, query]);\n\n  const searchImages = newSearch => {\n    setQuery(newSearch);\n    setImages([]);\n    setPage(1);\n    setError(false);\n    setIsLoading(true);\n  };\n\n  const loadMoreButton = () => {\n    setIsLoading(true);\n    setPage(prev => prev + 1)\n  };\n\n  return (\n    <div>\n         <Searchbar onSubmit={searchImages} />\n         {isLoading && <Loader/>}\n         <ImageGallery images={images} />\n         {isLoading && (\n          <Button LoadMoreButton={loadMoreButton} />\n        )}\n      </div>\n  )\n}\n\n// export class App extends Component {\n\n//   onHandleSubmit = query => {\n//     if (this.state.query === query) {\n//       return;\n//     }\n//     this.setState({\n//       query,\n//       page: 1,\n//       images: [],\n//       isLoading: true,\n//       isLoadMore: false,\n//     });\n//   };\n\n//   LoadMoreButton = () => {\n//     this.setState(prevState => ({ page: prevState.page + 1 }));\n//   };\n\n//   async componentDidUpdate(prevProps, prevState) {\n//     const perPage = 12;\n//     try {\n//       if (\n//         prevState.query !== this.state.query ||\n//         prevState.page !== this.state.page\n//       ) {\n//         const data = await fetchImages(this.state.query, this.state.page);\n\n//         if (data.hits.length === 0) {\n//           Notify.warning(\n//             'Sorry, there are no images matching your search query'\n//           );\n//           this.setState({ isLoading: false });\n//           return;\n//         }\n\n//         this.setState(prevState => ({\n//           images: [...prevState.images, ...data.hits],\n//           isLoading: false,\n//         }));\n\n//         let totalPage = data.totalHits / perPage;\n\n//         if (totalPage > 1) {\n//           this.setState({ isLoadMore: true });\n//         }\n\n//         if (this.state.page > totalPage) {\n//           this.setState({ isLoadMore: false });\n//         }\n//       }\n//     } catch (error) {\n//       this.setState({ isError: true, isLoading: false });\n//     }\n//   }\n\n//   render() {\n//     const { images, isLoading, isLoadMore } = this.state;\n//     return (\n//     );\n//   }\n// }"]},"metadata":{},"sourceType":"module"}
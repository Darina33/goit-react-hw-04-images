{"ast":null,"code":"var _jsxFileName = \"/Users/darina/Documents/GitHub/goit-react-hw-03-image-finder/src/components/App.jsx\";\nimport { Component } from 'react';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport Searchbar from \"./Searchbar\";\nimport ImageGallery from \"./ImageGallery\";\nimport fetchImages from '/services/image-api';\nimport Loader from \"./Loader\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst perPage = 12;\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      page: 1,\n      query: '',\n      images: [],\n      isLoading: false,\n      isError: false,\n      isLoadMore: false\n    };\n\n    this.onSubmit = query => {\n      if (this.state.query === query) {\n        Notify.warning('images for this query are now shown');\n        return;\n      }\n\n      this.setState({\n        query,\n        page: 1,\n        images: [],\n        isLoading: true,\n        isLoadMore: false\n      });\n    };\n\n    this.handleLoadMoreButton = () => {\n      this.setState(prevState => ({\n        page: prevState.page + 1\n      }));\n    };\n  }\n\n  async componentDidUpdate(_, prevState) {\n    try {\n      if (prevState.query !== this.state.query || prevState.page !== this.state.page) {\n        const data = await fetchImages(this.state.query, this.state.page);\n\n        if (data.hits.length === 0) {\n          Notify.warning('Sorry, there are no images matching your serach query, please try again');\n          this.setState({\n            isLoading: false\n          });\n          return;\n        }\n\n        this.setState(prevState => ({\n          images: [...prevState.images, ...data.hits],\n          isLoading: false\n        }));\n        let totalPage = data.totalHits / perPage;\n\n        if (totalPage > 1) {\n          this.setState({\n            isLoadMore: true\n          });\n        }\n\n        if (this.state.page > totalPage) {\n          this.setState({\n            isLoadMore: false\n          });\n        }\n      }\n    } catch (error) {\n      this.setState({\n        isError: true,\n        isLoading: false\n      });\n    }\n  }\n\n  render() {\n    const {\n      images,\n      isLoading,\n      isError,\n      isLoadMore\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(App, {\n      children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n        onSubmit: this.onSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(ImageGallery, {\n        images: images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), isLoadMore && /*#__PURE__*/_jsxDEV(Button, {\n        handleLoadMoreButton: this.handleLoadMoreButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n} // import { Component } from 'react';\n// import ImageGallery from '../ImageGallery'\n// import Loader from 'components/Loader';\n// import Button from 'components/Button';\n// import Modal from 'components/Modal';\n// import fetchImages from '../../services/image-api';\n// const Status = {\n//     IDLE: 'idle',\n//     PENDING: 'pending',\n//     RESOLVED: 'resolved',\n//     REJECTED: 'rejected',\n// }\n// export default class ImageInfo extends Component {\n//     state = {\n//         page: 1,\n//         query: '',\n//         image: null,\n//         error: null,\n//         showModal: false,\n//         status: Status.IDLE\n//     }\n//     componentDidUpdate(prevProps, prevState) {\n//         const prevName = prevProps.imageName;\n//         const nextName = this.props.imageName;\n//         this.state.text = nextName;\n//         if (prevName !== nextName) {\n//             this.setState({ status: Status.PENDING });\n//             fetchImages(nextName, this.state.page)\n//                 .then(image => this.setState({ image: image.hits, status: Status.RESOLVED }))\n//         }\n//     }\n//     onNextPage(prevProps) {\n//         this.setState({ status: Status.PENDING });\n//             fetchImages(this.state.text, this.state.page)\n//                 .then(image => this.setState(prevState => ({ image: [...prevState.image, ...image.hits], status: Status.RESOLVED })))\n//     }\n//      toggleModal = () => {\n//     this.setState(({ showModal }) => ({\n//       showModal: !showModal,\n//     }));\n//   };\n//     render() { \n//         const { image, error, status } = this.state;\n//         const { imageName } = this.props\n//         if (status === 'idle') {\n//             return \n//         }\n//         if (status === 'pending') {\n//             return <Loader/>\n//         }\n//         if (status === 'rejected') { \n//             return alert(error)\n//         }\n//         if (status === 'resolved') {\n//             return (\n//                 <div><ImageGallery images={image} />\n//                     {this.state.showModal && (\n//           <Modal onClose={this.toggleModal}>\n//             <div>Hi</div>\n//           </Modal>\n//         )}\n//                 {(\n//             <Button onClick={this.onNextPage} />\n//           )}</div>)\n//         }\n//     }\n// }","map":{"version":3,"sources":["/Users/darina/Documents/GitHub/goit-react-hw-03-image-finder/src/components/App.jsx"],"names":["Component","Notify","Searchbar","ImageGallery","fetchImages","Loader","Button","perPage","App","state","page","query","images","isLoading","isError","isLoadMore","onSubmit","warning","setState","handleLoadMoreButton","prevState","componentDidUpdate","_","data","hits","length","totalPage","totalHits","error","render"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport Searchbar from \"./Searchbar\";\nimport ImageGallery from \"./ImageGallery\";\nimport fetchImages from '/services/image-api';\nimport Loader from \"./Loader\";\nimport Button from \"./Button\";\n\n\n\nconst perPage = 12;\n\nexport class App extends Component {\n  state = {\n    page: 1,\n    query: '',\n    images: [],\n    isLoading: false,\n    isError: false,\n    isLoadMore: false,\n  };\n\n  onSubmit = query => {\n    if (this.state.query === query) {\n      Notify.warning('images for this query are now shown');\n      return;\n    }\n    this.setState({\n      query,\n      page: 1,\n      images: [],\n      isLoading: true,\n      isLoadMore: false,\n    });\n  };\n\n  handleLoadMoreButton = () => {\n    this.setState(prevState => ({ page: prevState.page + 1 }));\n  };\n\n  async componentDidUpdate(_, prevState) {\n    try {\n      if (\n        prevState.query !== this.state.query ||\n        prevState.page !== this.state.page\n      ) {\n        const data = await fetchImages(this.state.query, this.state.page);\n\n        if (data.hits.length === 0) {\n          Notify.warning(\n            'Sorry, there are no images matching your serach query, please try again'\n          );\n          this.setState({ isLoading: false });\n          return;\n        }\n\n        this.setState(prevState => ({\n          images: [...prevState.images, ...data.hits],\n          isLoading: false,\n        }));\n\n        let totalPage = data.totalHits / perPage;\n\n        if (totalPage > 1) {\n          this.setState({ isLoadMore: true });\n        }\n\n        if (this.state.page > totalPage) {\n          this.setState({ isLoadMore: false });\n        }\n      }\n    } catch (error) {\n      this.setState({ isError: true, isLoading: false });\n    }\n  }\n\n  render() {\n    const { images, isLoading, isError, isLoadMore } = this.state;\n    return (\n      <App>\n        {/* {isError && <ErrorMessage />} */}\n        <Searchbar onSubmit={this.onSubmit} />\n        {isLoading && <Loader/>}\n        <ImageGallery images={images} />\n        {isLoadMore && (\n          <Button handleLoadMoreButton={this.handleLoadMoreButton} />\n        )}\n      </App>\n    );\n  }\n}\n\n\n// import { Component } from 'react';\n// import ImageGallery from '../ImageGallery'\n// import Loader from 'components/Loader';\n// import Button from 'components/Button';\n// import Modal from 'components/Modal';\n\n// import fetchImages from '../../services/image-api';\n\n// const Status = {\n//     IDLE: 'idle',\n//     PENDING: 'pending',\n//     RESOLVED: 'resolved',\n//     REJECTED: 'rejected',\n// }\n\n// export default class ImageInfo extends Component {\n//     state = {\n//         page: 1,\n//         query: '',\n//         image: null,\n//         error: null,\n//         showModal: false,\n//         status: Status.IDLE\n//     }\n\n//     componentDidUpdate(prevProps, prevState) {\n//         const prevName = prevProps.imageName;\n//         const nextName = this.props.imageName;\n//         this.state.text = nextName;\n\n//         if (prevName !== nextName) {\n\n//             this.setState({ status: Status.PENDING });\n\n//             fetchImages(nextName, this.state.page)\n//                 .then(image => this.setState({ image: image.hits, status: Status.RESOLVED }))\n//         }\n//     }\n\n//     onNextPage(prevProps) {\n//         this.setState({ status: Status.PENDING });\n\n//             fetchImages(this.state.text, this.state.page)\n//                 .then(image => this.setState(prevState => ({ image: [...prevState.image, ...image.hits], status: Status.RESOLVED })))\n//     }\n\n//      toggleModal = () => {\n//     this.setState(({ showModal }) => ({\n//       showModal: !showModal,\n//     }));\n//   };\n\n//     render() { \n//         const { image, error, status } = this.state;\n//         const { imageName } = this.props\n\n//         if (status === 'idle') {\n//             return \n//         }\n\n//         if (status === 'pending') {\n//             return <Loader/>\n//         }\n\n//         if (status === 'rejected') { \n//             return alert(error)\n//         }\n\n//         if (status === 'resolved') {\n//             return (\n//                 <div><ImageGallery images={image} />\n//                     {this.state.showModal && (\n//           <Modal onClose={this.toggleModal}>\n//             <div>Hi</div>\n//           </Modal>\n//         )}\n//                 {(\n//             <Button onClick={this.onNextPage} />\n//           )}</div>)\n//         }\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}
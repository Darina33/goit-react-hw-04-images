{"ast":null,"code":"var _jsxFileName = \"/Users/darina/Documents/GitHub/goit-react-hw-03-image-finder/src/components/ImageInfo/ImageInfo.jsx\";\nimport { Component } from 'react';\nimport ImageGallery from '../ImageGallery';\nimport Loader from 'components/Loader';\nimport Button from 'components/Button';\nimport Modal from 'components/Modal';\nimport fetchImages from '../../services/image-api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected'\n};\nexport default class ImageInfo extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      page: 1,\n      query: '',\n      image: null,\n      error: null,\n      showModal: false,\n      status: Status.IDLE\n    };\n\n    this.toggleModal = () => {\n      this.setState(_ref => {\n        let {\n          showModal\n        } = _ref;\n        return {\n          showModal: !showModal\n        };\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevName = prevProps.imageName;\n    const nextName = this.props.imageName;\n    this.state.text = nextName;\n\n    if (prevName !== nextName) {\n      this.setState({\n        status: Status.PENDING\n      });\n      fetchImages(nextName, page).then(image => this.setState({\n        image: image.hits,\n        status: Status.RESOLVED\n      }));\n    }\n  }\n\n  onNextPage(prevProps) {\n    this.setState({\n      status: Status.PENDING\n    });\n    fetchImages(this.state.text, page).then(image => this.setState(prevState => ({\n      image: [...prevState.image, ...image.hits],\n      status: Status.RESOLVED\n    })));\n  }\n\n  render() {\n    const {\n      image,\n      error,\n      status\n    } = this.state;\n    const {\n      imageName\n    } = this.props;\n\n    if (status === 'idle') {\n      return;\n    }\n\n    if (status === 'pending') {\n      return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (status === 'rejected') {\n      return alert(error);\n    }\n\n    if (status === 'resolved') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ImageGallery, {\n          images: image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 22\n        }, this), this.state.showModal && /*#__PURE__*/_jsxDEV(Modal, {\n          onClose: this.toggleModal,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Hi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.onNextPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/darina/Documents/GitHub/goit-react-hw-03-image-finder/src/components/ImageInfo/ImageInfo.jsx"],"names":["Component","ImageGallery","Loader","Button","Modal","fetchImages","Status","IDLE","PENDING","RESOLVED","REJECTED","ImageInfo","state","page","query","image","error","showModal","status","toggleModal","setState","componentDidUpdate","prevProps","prevState","prevName","imageName","nextName","props","text","then","hits","onNextPage","render","alert"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport ImageGallery from '../ImageGallery'\nimport Loader from 'components/Loader';\nimport Button from 'components/Button';\nimport Modal from 'components/Modal';\n\nimport fetchImages from '../../services/image-api';\n\nconst Status = {\n    IDLE: 'idle',\n    PENDING: 'pending',\n    RESOLVED: 'resolved',\n    REJECTED: 'rejected',\n}\n\nexport default class ImageInfo extends Component {\n    state = {\n        page: 1,\n        query: '',\n        image: null,\n        error: null,\n        showModal: false,\n        status: Status.IDLE\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const prevName = prevProps.imageName;\n        const nextName = this.props.imageName;\n        this.state.text = nextName;\n\n        if (prevName !== nextName) {\n\n            this.setState({ status: Status.PENDING });\n\n            fetchImages(nextName, page)\n                .then(image => this.setState({ image: image.hits, status: Status.RESOLVED }))\n        }\n    }\n\n    onNextPage(prevProps) {\n        this.setState({ status: Status.PENDING });\n\n            fetchImages(this.state.text, page)\n                .then(image => this.setState(prevState => ({ image: [...prevState.image, ...image.hits], status: Status.RESOLVED })))\n    }\n\n     toggleModal = () => {\n    this.setState(({ showModal }) => ({\n      showModal: !showModal,\n    }));\n  };\n\n    render() { \n        const { image, error, status } = this.state;\n        const { imageName } = this.props\n\n        if (status === 'idle') {\n            return \n        }\n\n        if (status === 'pending') {\n            return <Loader/>\n        }\n\n        if (status === 'rejected') { \n            return alert(error)\n        }\n\n        if (status === 'resolved') {\n            return (\n                <div><ImageGallery images={image} />\n                    {this.state.showModal && (\n          <Modal onClose={this.toggleModal}>\n            <div>Hi</div>\n          </Modal>\n        )}\n                {(\n            <Button onClick={this.onNextPage} />\n          )}</div>)\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}
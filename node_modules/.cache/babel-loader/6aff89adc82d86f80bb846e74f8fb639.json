{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport Searchbar from \"./Searchbar\";\nimport ImageGallery from \"./ImageGallery\";\nimport fetchImages from '../services/image-api';\nimport Loader from \"./Loader\";\nimport Button from \"./Button\";\n\nfunction App() {\n  _s();\n\n  const [query, setQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [images, setImages] = useState('');\n  const [largeImages, setLargeImages] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    if (!query) return;\n\n    const getImages = async () => {\n      try {\n        const images = await fetchImages(query, page);\n\n        if (images === 0) {\n          return Notify.warning('Sorry, there are no images matching your search query');\n        }\n\n        setImages(prev => [...prev, ...images]);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n  });\n} // export class App extends Component {\n//   onHandleSubmit = query => {\n//     if (this.state.query === query) {\n//       return;\n//     }\n//     this.setState({\n//       query,\n//       page: 1,\n//       images: [],\n//       isLoading: true,\n//       isLoadMore: false,\n//     });\n//   };\n//   LoadMoreButton = () => {\n//     this.setState(prevState => ({ page: prevState.page + 1 }));\n//   };\n//   async componentDidUpdate(prevProps, prevState) {\n//     const perPage = 12;\n//     try {\n//       if (\n//         prevState.query !== this.state.query ||\n//         prevState.page !== this.state.page\n//       ) {\n//         const data = await fetchImages(this.state.query, this.state.page);\n//         if (data.hits.length === 0) {\n//           Notify.warning(\n//             'Sorry, there are no images matching your search query'\n//           );\n//           this.setState({ isLoading: false });\n//           return;\n//         }\n//         this.setState(prevState => ({\n//           images: [...prevState.images, ...data.hits],\n//           isLoading: false,\n//         }));\n//         let totalPage = data.totalHits / perPage;\n//         if (totalPage > 1) {\n//           this.setState({ isLoadMore: true });\n//         }\n//         if (this.state.page > totalPage) {\n//           this.setState({ isLoadMore: false });\n//         }\n//       }\n//     } catch (error) {\n//       this.setState({ isError: true, isLoading: false });\n//     }\n//   }\n//   render() {\n//     const { images, isLoading, isLoadMore } = this.state;\n//     return (<div>\n//         <Searchbar onSubmit={this.onHandleSubmit} />\n//         {isLoading && <Loader/>}\n//         <ImageGallery images={images} />\n//         {isLoadMore && (\n//           <Button LoadMoreButton={this.LoadMoreButton} />\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n\n_s(App, \"v9D4XeiCJIPcuqM47Q5JwznSdfk=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/darina/Documents/GitHub/goit-react-hw-04-images/src/components/App.jsx"],"names":["useState","useEffect","Notify","Searchbar","ImageGallery","fetchImages","Loader","Button","App","query","setQuery","page","setPage","images","setImages","largeImages","setLargeImages","isLoading","setIsLoading","error","setError","getImages","warning","prev","err"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,oCAAvB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,SAASC,GAAT,GAAc;AAAA;;AACZ,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACmB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACQ,KAAL,EAAY;;AACZ,UAAMY,SAAS,GAAG,YAAW;AAC3B,UAAI;AACF,cAAMR,MAAM,GAAG,MAAMR,WAAW,CAACI,KAAD,EAAQE,IAAR,CAAhC;;AACA,YAAIE,MAAM,KAAK,CAAf,EAAkB;AAChB,iBAAOX,MAAM,CAACoB,OAAP,CACL,uDADK,CAAP;AAED;;AACDR,QAAAA,SAAS,CAACS,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAU,GAAGV,MAAb,CAAT,CAAT;AACD,OAPD,CAOE,OAAOW,GAAP,EAAY;AACZJ,QAAAA,QAAQ,CAACI,GAAD,CAAR;AACD,OATD,SASU;AACRN,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAbD;AAcD,GAhBQ,CAAT;AAkBD,C,CAED;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAhGSV,G;;KAAAA,G","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport Searchbar from \"./Searchbar\";\nimport ImageGallery from \"./ImageGallery\";\nimport fetchImages from '../services/image-api';\nimport Loader from \"./Loader\";\nimport Button from \"./Button\";\n\nfunction App(){\n  const [query, setQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [images, setImages] = useState('');\n  const [largeImages, setLargeImages] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => { \n    if (!query) return;\n    const getImages = async() => {\n      try {\n        const images = await fetchImages(query, page);\n        if (images === 0) {\n          return Notify.warning(\n            'Sorry, there are no images matching your search query')\n        }\n        setImages(prev => [...prev, ...images]);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setIsLoading(false)\n      }\n    }\n  })\n\n}\n\n// export class App extends Component {\n\n//   onHandleSubmit = query => {\n//     if (this.state.query === query) {\n//       return;\n//     }\n//     this.setState({\n//       query,\n//       page: 1,\n//       images: [],\n//       isLoading: true,\n//       isLoadMore: false,\n//     });\n//   };\n\n//   LoadMoreButton = () => {\n//     this.setState(prevState => ({ page: prevState.page + 1 }));\n//   };\n\n//   async componentDidUpdate(prevProps, prevState) {\n//     const perPage = 12;\n//     try {\n//       if (\n//         prevState.query !== this.state.query ||\n//         prevState.page !== this.state.page\n//       ) {\n//         const data = await fetchImages(this.state.query, this.state.page);\n\n//         if (data.hits.length === 0) {\n//           Notify.warning(\n//             'Sorry, there are no images matching your search query'\n//           );\n//           this.setState({ isLoading: false });\n//           return;\n//         }\n\n//         this.setState(prevState => ({\n//           images: [...prevState.images, ...data.hits],\n//           isLoading: false,\n//         }));\n\n//         let totalPage = data.totalHits / perPage;\n\n//         if (totalPage > 1) {\n//           this.setState({ isLoadMore: true });\n//         }\n\n//         if (this.state.page > totalPage) {\n//           this.setState({ isLoadMore: false });\n//         }\n//       }\n//     } catch (error) {\n//       this.setState({ isError: true, isLoading: false });\n//     }\n//   }\n\n//   render() {\n//     const { images, isLoading, isLoadMore } = this.state;\n//     return (<div>\n//         <Searchbar onSubmit={this.onHandleSubmit} />\n//         {isLoading && <Loader/>}\n//         <ImageGallery images={images} />\n//         {isLoadMore && (\n//           <Button LoadMoreButton={this.LoadMoreButton} />\n//         )}\n//       </div>\n//     );\n//   }\n// }"]},"metadata":{},"sourceType":"module"}